/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/~__root'
import { Route as ProtectedRouteRouteImport } from './routes/~_protected/~route'
import { Route as ProtectedProfileRouteRouteImport } from './routes/~_protected/~profile/~route'
import { Route as publicAuthRouteRouteImport } from './routes/~(public)/~_auth/~route'
import { Route as publicIndexRouteRouteImport } from './routes/~(public)/~index/~route'
import { Route as publicQuestionsAskRouteImport } from './routes/~(public)/~questions/~ask'
import { Route as publicQuestionsQuestionIdRouteImport } from './routes/~(public)/~questions/~$questionId'
import { Route as publicMembersUserIdRouteImport } from './routes/~(public)/~members/~$userId'
import { Route as publicAuthSignupRouteRouteImport } from './routes/~(public)/~_auth/~signup/~route'
import { Route as publicAuthLoginRouteRouteImport } from './routes/~(public)/~_auth/~login/~route'
import { Route as publicQuestionsIndexRouteImport } from './routes/~(public)/~questions/~index'
import { Route as publicMembersIndexRouteImport } from './routes/~(public)/~members/~index'

const publicRouteImport = createFileRoute('/(public)')()

const publicRoute = publicRouteImport.update({
  id: '/(public)',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedRouteRoute = ProtectedRouteRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedProfileRouteRoute = ProtectedProfileRouteRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const publicAuthRouteRoute = publicAuthRouteRouteImport.update({
  id: '/_auth',
  getParentRoute: () => publicRoute,
} as any)
const publicIndexRouteRoute = publicIndexRouteRouteImport.update({
  id: '/(public)/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const publicQuestionsAskRoute = publicQuestionsAskRouteImport.update({
  id: '/questions/ask',
  path: '/questions/ask',
  getParentRoute: () => publicRoute,
} as any)
const publicQuestionsQuestionIdRoute =
  publicQuestionsQuestionIdRouteImport.update({
    id: '/questions/$questionId',
    path: '/questions/$questionId',
    getParentRoute: () => publicRoute,
  } as any)
const publicMembersUserIdRoute = publicMembersUserIdRouteImport.update({
  id: '/members/$userId',
  path: '/members/$userId',
  getParentRoute: () => publicRoute,
} as any)
const publicAuthSignupRouteRoute = publicAuthSignupRouteRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => publicAuthRouteRoute,
} as any)
const publicAuthLoginRouteRoute = publicAuthLoginRouteRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => publicAuthRouteRoute,
} as any)
const publicQuestionsIndexRoute = publicQuestionsIndexRouteImport.update({
  id: '/questions/',
  path: '/questions/',
  getParentRoute: () => publicRoute,
} as any)
const publicMembersIndexRoute = publicMembersIndexRouteImport.update({
  id: '/members/',
  path: '/members/',
  getParentRoute: () => publicRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof publicAuthRouteRouteWithChildren
  '/profile': typeof ProtectedProfileRouteRoute
  '/members': typeof publicMembersIndexRoute
  '/questions': typeof publicQuestionsIndexRoute
  '/login': typeof publicAuthLoginRouteRoute
  '/signup': typeof publicAuthSignupRouteRoute
  '/members/$userId': typeof publicMembersUserIdRoute
  '/questions/$questionId': typeof publicQuestionsQuestionIdRoute
  '/questions/ask': typeof publicQuestionsAskRoute
}
export interface FileRoutesByTo {
  '/': typeof publicAuthRouteRouteWithChildren
  '/profile': typeof ProtectedProfileRouteRoute
  '/members': typeof publicMembersIndexRoute
  '/questions': typeof publicQuestionsIndexRoute
  '/login': typeof publicAuthLoginRouteRoute
  '/signup': typeof publicAuthSignupRouteRoute
  '/members/$userId': typeof publicMembersUserIdRoute
  '/questions/$questionId': typeof publicQuestionsQuestionIdRoute
  '/questions/ask': typeof publicQuestionsAskRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_protected': typeof ProtectedRouteRouteWithChildren
  '/(public)/': typeof publicIndexRouteRoute
  '/(public)': typeof publicRouteWithChildren
  '/(public)/_auth': typeof publicAuthRouteRouteWithChildren
  '/_protected/profile': typeof ProtectedProfileRouteRoute
  '/(public)/members/': typeof publicMembersIndexRoute
  '/(public)/questions/': typeof publicQuestionsIndexRoute
  '/(public)/_auth/login': typeof publicAuthLoginRouteRoute
  '/(public)/_auth/signup': typeof publicAuthSignupRouteRoute
  '/(public)/members/$userId': typeof publicMembersUserIdRoute
  '/(public)/questions/$questionId': typeof publicQuestionsQuestionIdRoute
  '/(public)/questions/ask': typeof publicQuestionsAskRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/profile'
    | '/members'
    | '/questions'
    | '/login'
    | '/signup'
    | '/members/$userId'
    | '/questions/$questionId'
    | '/questions/ask'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/profile'
    | '/members'
    | '/questions'
    | '/login'
    | '/signup'
    | '/members/$userId'
    | '/questions/$questionId'
    | '/questions/ask'
  id:
    | '__root__'
    | '/_protected'
    | '/(public)/'
    | '/(public)'
    | '/(public)/_auth'
    | '/_protected/profile'
    | '/(public)/members/'
    | '/(public)/questions/'
    | '/(public)/_auth/login'
    | '/(public)/_auth/signup'
    | '/(public)/members/$userId'
    | '/(public)/questions/$questionId'
    | '/(public)/questions/ask'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ProtectedRouteRoute: typeof ProtectedRouteRouteWithChildren
  publicIndexRouteRoute: typeof publicIndexRouteRoute
  publicRoute: typeof publicRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(public)': {
      id: '/(public)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/profile': {
      id: '/_protected/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProtectedProfileRouteRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/(public)/_auth': {
      id: '/(public)/_auth'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicAuthRouteRouteImport
      parentRoute: typeof publicRoute
    }
    '/(public)/': {
      id: '/(public)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicIndexRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(public)/questions/ask': {
      id: '/(public)/questions/ask'
      path: '/questions/ask'
      fullPath: '/questions/ask'
      preLoaderRoute: typeof publicQuestionsAskRouteImport
      parentRoute: typeof publicRoute
    }
    '/(public)/questions/$questionId': {
      id: '/(public)/questions/$questionId'
      path: '/questions/$questionId'
      fullPath: '/questions/$questionId'
      preLoaderRoute: typeof publicQuestionsQuestionIdRouteImport
      parentRoute: typeof publicRoute
    }
    '/(public)/members/$userId': {
      id: '/(public)/members/$userId'
      path: '/members/$userId'
      fullPath: '/members/$userId'
      preLoaderRoute: typeof publicMembersUserIdRouteImport
      parentRoute: typeof publicRoute
    }
    '/(public)/_auth/signup': {
      id: '/(public)/_auth/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof publicAuthSignupRouteRouteImport
      parentRoute: typeof publicAuthRouteRoute
    }
    '/(public)/_auth/login': {
      id: '/(public)/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof publicAuthLoginRouteRouteImport
      parentRoute: typeof publicAuthRouteRoute
    }
    '/(public)/questions/': {
      id: '/(public)/questions/'
      path: '/questions'
      fullPath: '/questions'
      preLoaderRoute: typeof publicQuestionsIndexRouteImport
      parentRoute: typeof publicRoute
    }
    '/(public)/members/': {
      id: '/(public)/members/'
      path: '/members'
      fullPath: '/members'
      preLoaderRoute: typeof publicMembersIndexRouteImport
      parentRoute: typeof publicRoute
    }
  }
}

interface ProtectedRouteRouteChildren {
  ProtectedProfileRouteRoute: typeof ProtectedProfileRouteRoute
}

const ProtectedRouteRouteChildren: ProtectedRouteRouteChildren = {
  ProtectedProfileRouteRoute: ProtectedProfileRouteRoute,
}

const ProtectedRouteRouteWithChildren = ProtectedRouteRoute._addFileChildren(
  ProtectedRouteRouteChildren,
)

interface publicAuthRouteRouteChildren {
  publicAuthLoginRouteRoute: typeof publicAuthLoginRouteRoute
  publicAuthSignupRouteRoute: typeof publicAuthSignupRouteRoute
}

const publicAuthRouteRouteChildren: publicAuthRouteRouteChildren = {
  publicAuthLoginRouteRoute: publicAuthLoginRouteRoute,
  publicAuthSignupRouteRoute: publicAuthSignupRouteRoute,
}

const publicAuthRouteRouteWithChildren = publicAuthRouteRoute._addFileChildren(
  publicAuthRouteRouteChildren,
)

interface publicRouteChildren {
  publicAuthRouteRoute: typeof publicAuthRouteRouteWithChildren
  publicMembersIndexRoute: typeof publicMembersIndexRoute
  publicQuestionsIndexRoute: typeof publicQuestionsIndexRoute
  publicMembersUserIdRoute: typeof publicMembersUserIdRoute
  publicQuestionsQuestionIdRoute: typeof publicQuestionsQuestionIdRoute
  publicQuestionsAskRoute: typeof publicQuestionsAskRoute
}

const publicRouteChildren: publicRouteChildren = {
  publicAuthRouteRoute: publicAuthRouteRouteWithChildren,
  publicMembersIndexRoute: publicMembersIndexRoute,
  publicQuestionsIndexRoute: publicQuestionsIndexRoute,
  publicMembersUserIdRoute: publicMembersUserIdRoute,
  publicQuestionsQuestionIdRoute: publicQuestionsQuestionIdRoute,
  publicQuestionsAskRoute: publicQuestionsAskRoute,
}

const publicRouteWithChildren =
  publicRoute._addFileChildren(publicRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  ProtectedRouteRoute: ProtectedRouteRouteWithChildren,
  publicIndexRouteRoute: publicIndexRouteRoute,
  publicRoute: publicRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
